const { v4: uuidv4 } = require('uuid');
const {
  readNotifications,
  writeNotifications,
  readSettings,
  getNextNotificationId
} = require('../database/database');

/**
 * Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º ÏÑúÎπÑÏä§
 */
class NotificationService {
  constructor(io) {
    this.io = io;
    this.notifications = [];
    this.settings = null;
  }

  /**
   * ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî
   */
  async initialize() {
    try {
      this.notifications = await readNotifications();
      this.settings = await readSettings();
      console.log(`üîî Loaded ${this.notifications.length} notifications`);
    } catch (error) {
      console.error('‚ùå Error initializing notification service:', error);
      throw error;
    }
  }

  /**
   * ÏÉà ÏïåÎ¶º ÏÉùÏÑ± Î∞è Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
   */
  async createNotification(type, title, message, data = {}) {
    try {
      // ÏïåÎ¶º ÏÑ§Ï†ï ÌôïÏù∏
      const settings = await readSettings();
      if (!settings.notifications.enabled || !settings.notifications.types[type]) {
        console.log(`üîá Notification disabled for type: ${type}`);
        return null;
      }

      // ÏÉà ÏïåÎ¶º ÏÉùÏÑ±
      const notification = {
        id: uuidv4(),
        type,
        title,
        message,
        data,
        isRead: false,
        createdAt: new Date().toISOString()
      };

      // Î©îÎ™®Î¶¨ÏôÄ ÌååÏùºÏóê Ï†ÄÏû•
      this.notifications.unshift(notification); // ÏµúÏã† ÏàúÏúºÎ°ú Ï∂îÍ∞Ä
      await writeNotifications(this.notifications);

      console.log(`üîî Created notification: ${notification.id} - ${title}`);

      // WebSocketÏúºÎ°ú Ïã§ÏãúÍ∞Ñ Ï†ÑÏÜ°
      this.io.to('notifications').emit('notification:new', notification);

      // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ïàò ÏóÖÎç∞Ïù¥Ìä∏
      const unreadCount = await this.getUnreadCount();
      this.io.to('notifications').emit('notifications:count_updated', {
        unreadCount,
        timestamp: new Date().toISOString()
      });

      return notification;
    } catch (error) {
      console.error('‚ùå Error creating notification:', error);
      throw error;
    }
  }

  /**
   * ÎåìÍ∏Ä ÏïåÎ¶º ÏÉùÏÑ± (ÌäπÎ≥Ñ Î©îÏÑúÎìú)
   */
  async createCommentNotification(comment) {
    const title = 'ÏÉà ÎåìÍ∏ÄÏù¥ Îã¨Î†∏ÏäµÎãàÎã§';
    const message = `${comment.commenterName}ÎãòÏù¥ '${comment.postTitle}'Ïóê ÎåìÍ∏ÄÏùÑ ÎÇ®Í≤ºÏäµÎãàÎã§: "${comment.content.substring(0, 50)}${comment.content.length > 50 ? '...' : ''}"`;
    
    const data = {
      commentId: comment.id,
      postTitle: comment.postTitle,
      commenterName: comment.commenterName,
      commentPreview: comment.content.substring(0, 100)
    };

    return await this.createNotification('comment', title, message, data);
  }

  /**
   * Î™®Îì† ÏïåÎ¶º Ï°∞Ìöå
   */
  async getAllNotifications(limit = 50) {
    try {
      // Î©îÎ™®Î¶¨ÏóêÏÑú ÏµúÏã† Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©ÌïòÍ±∞ÎÇò ÌååÏùºÏóêÏÑú ÏùΩÍ∏∞
      if (this.notifications.length === 0) {
        this.notifications = await readNotifications();
      }

      // ÏµúÏã† ÏàúÏúºÎ°ú Ï†ïÎ†¨ÌïòÍ≥† limit Ï†ÅÏö©
      const sortedNotifications = this.notifications
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
        .slice(0, limit);

      return sortedNotifications;
    } catch (error) {
      console.error('‚ùå Error getting notifications:', error);
      throw error;
    }
  }

  /**
   * ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ï°∞Ìöå
   */
  async getUnreadNotifications() {
    try {
      const notifications = await this.getAllNotifications();
      return notifications.filter(notification => !notification.isRead);
    } catch (error) {
      console.error('‚ùå Error getting unread notifications:', error);
      throw error;
    }
  }

  /**
   * ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ïàò Ï°∞Ìöå
   */
  async getUnreadCount() {
    try {
      const unreadNotifications = await this.getUnreadNotifications();
      return unreadNotifications.length;
    } catch (error) {
      console.error('‚ùå Error getting unread count:', error);
      return 0;
    }
  }

  /**
   * ÏïåÎ¶ºÏùÑ ÏùΩÏùåÏúºÎ°ú ÌëúÏãú
   */
  async markAsRead(notificationId) {
    try {
      // Î©îÎ™®Î¶¨ÏóêÏÑú Ï∞æÍ∏∞
      const notificationIndex = this.notifications.findIndex(n => n.id === notificationId);
      if (notificationIndex === -1) {
        console.warn(`‚ö†Ô∏è Notification not found: ${notificationId}`);
        return false;
      }

      // Ïù¥ÎØ∏ ÏùΩÏùÄ ÏÉÅÌÉúÎ©¥ Ïä§ÌÇµ
      if (this.notifications[notificationIndex].isRead) {
        console.log(`üìñ Notification already read: ${notificationId}`);
        return true;
      }

      // ÏùΩÏùå ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
      this.notifications[notificationIndex].isRead = true;
      this.notifications[notificationIndex].readAt = new Date().toISOString();

      // ÌååÏùºÏóê Ï†ÄÏû•
      await writeNotifications(this.notifications);

      console.log(`üìñ Marked as read: ${notificationId}`);
      return true;
    } catch (error) {
      console.error('‚ùå Error marking notification as read:', error);
      throw error;
    }
  }

  /**
   * Î™®Îì† ÏïåÎ¶ºÏùÑ ÏùΩÏùåÏúºÎ°ú ÌëúÏãú
   */
  async markAllAsRead() {
    try {
      let changedCount = 0;
      const now = new Date().toISOString();

      this.notifications.forEach(notification => {
        if (!notification.isRead) {
          notification.isRead = true;
          notification.readAt = now;
          changedCount++;
        }
      });

      if (changedCount > 0) {
        await writeNotifications(this.notifications);
        console.log(`üìñ Marked ${changedCount} notifications as read`);

        // WebSocketÏúºÎ°ú Î≥ÄÍ≤Ω ÏïåÎ¶º
        this.io.to('notifications').emit('notifications:all_read', {
          changedCount,
          timestamp: now
        });

        // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ïàò ÏóÖÎç∞Ïù¥Ìä∏ (0Ïù¥ Îê®)
        this.io.to('notifications').emit('notifications:count_updated', {
          unreadCount: 0,
          timestamp: now
        });
      }

      return changedCount;
    } catch (error) {
      console.error('‚ùå Error marking all notifications as read:', error);
      throw error;
    }
  }

  /**
   * ÏïåÎ¶º ÏÇ≠Ï†ú
   */
  async deleteNotification(notificationId) {
    try {
      const initialLength = this.notifications.length;
      this.notifications = this.notifications.filter(n => n.id !== notificationId);

      if (this.notifications.length < initialLength) {
        await writeNotifications(this.notifications);
        console.log(`üóë Deleted notification: ${notificationId}`);

        // WebSocketÏúºÎ°ú ÏÇ≠Ï†ú ÏïåÎ¶º
        this.io.to('notifications').emit('notification:deleted', {
          notificationId,
          timestamp: new Date().toISOString()
        });

        // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ïàò ÏóÖÎç∞Ïù¥Ìä∏
        const unreadCount = await this.getUnreadCount();
        this.io.to('notifications').emit('notifications:count_updated', {
          unreadCount,
          timestamp: new Date().toISOString()
        });

        return true;
      }

      return false;
    } catch (error) {
      console.error('‚ùå Error deleting notification:', error);
      throw error;
    }
  }

  /**
   * Ïò§ÎûòÎêú ÏïåÎ¶º Ï†ïÎ¶¨ (30Ïùº Ïù¥ÏÉÅ)
   */
  async cleanupOldNotifications(daysToKeep = 30) {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

      const initialLength = this.notifications.length;
      this.notifications = this.notifications.filter(notification => {
        const createdAt = new Date(notification.createdAt);
        return createdAt > cutoffDate;
      });

      const removedCount = initialLength - this.notifications.length;

      if (removedCount > 0) {
        await writeNotifications(this.notifications);
        console.log(`üßπ Cleaned up ${removedCount} old notifications`);
      }

      return removedCount;
    } catch (error) {
      console.error('‚ùå Error cleaning up notifications:', error);
      throw error;
    }
  }

  /**
   * ÏïåÎ¶º ÌÜµÍ≥Ñ Ï°∞Ìöå
   */
  async getNotificationStats() {
    try {
      const notifications = await this.getAllNotifications();
      const total = notifications.length;
      const unread = notifications.filter(n => !n.isRead).length;
      const read = total - unread;

      // ÌÉÄÏûÖÎ≥Ñ ÌÜµÍ≥Ñ
      const typeStats = {};
      notifications.forEach(notification => {
        typeStats[notification.type] = (typeStats[notification.type] || 0) + 1;
      });

      // ÏµúÍ∑º 24ÏãúÍ∞Ñ ÌÜµÍ≥Ñ
      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      const recentNotifications = notifications.filter(n => 
        new Date(n.createdAt) > oneDayAgo
      );

      return {
        total,
        read,
        unread,
        typeStats,
        recent24h: recentNotifications.length,
        lastNotificationAt: notifications[0]?.createdAt || null
      };
    } catch (error) {
      console.error('‚ùå Error getting notification stats:', error);
      throw error;
    }
  }
}

module.exports = NotificationService;